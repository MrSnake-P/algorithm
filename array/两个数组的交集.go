package array

/*
例1：
输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2,2]
------------------------------------------
例2：
输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [4,9]
说明：
输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
我们可以不考虑输出结果的顺序。
进阶:
如果给定的数组已经排好序呢？将如何优化你的算法呢？
思路：设定两个为0的指针，比较两个指针的元素是否相等。如果指针的元素相等，我们将两个指针一起向后移动，并且将相等的元素放入空白数组。
*/
/*
解题步骤：
用到map的映射关系
找出两个数组的交集，出现的次数还要一致，就是是算法每个元素出现的次数 => map[元素]出现次数
*/

func intersect(num1, num2 []int) []int {
	// 首先建立映射关系
	times := make(map[int]int, len(num1))
	for i := range num1 {
		times[num1[i]] += 1
	}
	k := 0
	for j := range num2 {
		if times[num2[j]] > 0 {
			// 将出现次数减去1
			times[num2[j]] -= 1
			// 将交集的元素添加到num2中
			// 因为遍历过的已经没有其他作用，利用这点可以节省空间
			num2[k] = num2[j]
			k++
		}
	}
	return num2[0:k]
}
